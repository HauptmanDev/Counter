{"version":3,"sources":["serviceWorker.js","reducer.js","store.js","components/Value.jsx","components/IncReset.jsx","components/Limit.jsx","Counter.jsx","App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","RESET","initialState","value","start","max","changeValueAC","newValue","type","reducer","state","arguments","length","undefined","action","_objectSpread","newStartValue","newMaxValue","startValue","store","createStore","Value","classValue","this","props","react_default","a","createElement","className","React","Component","IncReset","disabled","status","onClick","addStep","reset","Limit","maxLimit","startLimit","statusSet","blockInputMax","blockInputStart","onMaxLimitButtonClick","e","_this","changeStatus","setState","currentTarget","onStartLimitButtonClick","onSetButtonClick","newMaxLimit","newStartLimit","setValue","inputErrorMax","inputErrorStart","onChange","min","Counter","changeStartValue","changeMaxValue","changeValue","render","src_components_Value","components_IncReset","components_Limit","ConnectedCounter","connect","dispatch","resetAC","changeStartValueAC","changeMaxValueAC","App","src_Counter","CounterApp","react_router_dom","es","App_App","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5108b741.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const CHANGE_START_VALUE = \"Counter/Reducer/CHANGE-START-VALUE\";\r\nexport const CHANGE_MAX_VALUE = \"Counter/Reducer/CHANGE-MAX-VALUE\";\r\nexport const CHANGE_VALUE = \"Counter/Reducer/CHANGE-VALUE\";\r\nexport const RESET = \"Counter/Reducer/RESET\";\r\n\r\n\r\nconst initialState = {\r\n    value: 0,\r\n    start: 0,\r\n    max: 10,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CHANGE_START_VALUE:\r\n            return {\r\n                ...state,\r\n                start: action.newStartValue\r\n            };\r\n        case CHANGE_MAX_VALUE:\r\n            return {\r\n                ...state,\r\n                max: action.newMaxValue\r\n            };\r\n        case CHANGE_VALUE:\r\n            return {\r\n                ...state,\r\n                value: action.newValue\r\n            };\r\n        case RESET:\r\n            return {\r\n                ...state,\r\n                value: action.startValue\r\n            };\r\n        default :\r\n            return state\r\n    }\r\n};\r\n\r\nexport const changeStartValueAC = (newStartValue) => {\r\n    return {\r\n        type: CHANGE_START_VALUE,\r\n        newStartValue: newStartValue\r\n    }\r\n};\r\nexport const changeMaxValueAC = (newMaxValue) => {\r\n    return {\r\n        type: CHANGE_MAX_VALUE,\r\n        newMaxValue: newMaxValue\r\n    }\r\n};\r\nexport const changeValueAC = (newValue) => {\r\n    return {\r\n        type: CHANGE_VALUE,\r\n        newValue: newValue\r\n    }\r\n};\r\nexport const resetAC = (startValue) => {\r\n    return {\r\n        type: RESET,\r\n        startValue: startValue\r\n    }\r\n};\r\n\r\nexport default reducer;","import {createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst store = createStore(reducer);\r\nexport default store;\r\n","import React from 'react';\nimport './Value.css'\n\nclass Value extends React.Component {\n    render() {\n        let classValue = this.props.state.value === this.props.state.max ? 'big' : 'small';\n        return (\n            <div className='screenValue'>\n                <span className={classValue}>{this.props.state.value}</span>\n            </div>\n        );\n    }\n}\n\n\n\nexport default Value;\n\n\n","import React from 'react';\nimport './../App.css'\n\nclass IncReset extends React.Component {\n\n    render  () {\n        return (\n            <div className='componentIncReset'>\n                <button className='incReset' disabled={this.props.state.status} onClick={this.props.addStep}>Inc</button>\n                <button className='incReset' disabled={this.props.state.status} onClick={this.props.reset}>Reset</button>\n            </div>\n        );\n    }\n}\n\nexport default IncReset;\n\n","import React from 'react';\nimport './../App.css';\n\n\nclass Limit extends React.Component {\n\n    state = {\n        maxLimit: 10,\n        startLimit: 0,\n        statusSet: true,\n        blockInputMax: false,\n        blockInputStart: false\n    };\n    onMaxLimitButtonClick = (e) => {\n        this.props.changeStatus(true);\n        this.setState({\n            statusSet: false\n        });\n\n        if (e.currentTarget.value < 1) {\n            this.setState({\n                maxLimit: +1,\n                blockInputMax: true,\n            })\n        } else if (e.currentTarget.value <= this.state.startLimit) {\n            this.setState({\n                blockInputMax: true,\n            })\n        } else {\n            this.setState({\n                blockInputMax: false,\n                maxLimit: +e.currentTarget.value,\n            })\n        }\n    };\n    onStartLimitButtonClick = (e) => {\n        this.props.changeStatus(true);\n        this.setState({\n            statusSet: false\n        });\n        if (e.currentTarget.value < 0) {\n            this.setState({\n                startLimit: 0,\n            })\n        } else if (e.currentTarget.value >= this.state.maxLimit) {\n            this.setState({\n                blockInputStart: true,\n            })\n        } else {\n            this.setState({\n                blockInputStart: false,\n                startLimit: +e.currentTarget.value,\n            })\n        }\n    };\n    onSetButtonClick = () => {\n        let newMaxLimit = this.state.maxLimit;\n        let newStartLimit = this.state.startLimit;\n        this.props.setValue(newMaxLimit, newStartLimit);\n        this.props.changeStatus(false);\n        this.setState({\n            statusSet: true\n        })\n    };\n\n    render() {\n        let inputErrorMax = this.state.blockInputMax ? 'error' : '';\n        let inputErrorStart = this.state.blockInputStart ? 'error' : '';\n        return (\n            <div className=\"limit\">\n                <div className=\"textLimit\">\n                    <span className='text'>Max value</span>\n                    <span className='text'>Start value</span>\n                </div>\n                <div>\n                    <input className={inputErrorMax} onChange={this.onMaxLimitButtonClick} value={this.state.maxLimit}\n                           type='number' min={0}/>\n                    <input className={inputErrorStart} onChange={this.onStartLimitButtonClick}\n                           value={this.state.startLimit}\n                           type='number' min={0}/>\n                </div>\n                <div className='buttonSet'>\n                    <button className='set' disabled={this.state.statusSet} onClick={this.onSetButtonClick}>Set</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Limit\n\n\n","import React from 'react';\nimport './App.css';\nimport Value from \"./components/Value\";\nimport IncReset from \"./components/IncReset\";\nimport Limit from \"./components/Limit\";\nimport {connect} from 'react-redux'\nimport {changeMaxValueAC, changeStartValueAC, changeValueAC, resetAC} from \"./reducer\";\n\n\nclass Counter extends React.Component {\n    state = {\n        status: false\n    };\n\n    addStep = () => {\n        if (this.props.state.value < this.props.state.max) {\n            this.props.addStep(this.props.state.value + 1)\n        } else if (this.props.state.value >= this.props.state.max) {\n            this.props.addStep(this.props.state.max)\n        }\n    };\n    reset = () => {\n        let startValue = this.props.state.start;\n        this.props.reset(startValue)\n    };\n    setValue = (newMaxValue, newStartValue) => {\n        this.props.changeStartValue(newStartValue);\n        this.props.changeMaxValue(newMaxValue);\n        if (this.props.state.value !== newStartValue) {\n            this.props.changeValue(newStartValue)\n        }\n    };\n    changeStatus = (status) => {\n        this.setState({status: status})\n    };\n\n    render = () => {\n        return (\n            <div className=\"display\">\n                <Value state={this.props.state}/>\n                <IncReset addStep={this.addStep} reset={this.reset} state={this.state}/>\n                <Limit changeStatus={this.changeStatus} setValue={this.setValue}/>\n            </div>\n        );\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        state: state\n    }\n};\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addStep(newValue) {\n            const action = changeValueAC(newValue);\n            dispatch(action)\n        },\n        reset(startValue) {\n            const action = resetAC(startValue);\n            dispatch(action)\n        },\n        changeStartValue(newStartValue) {\n            const action = changeStartValueAC(newStartValue);\n            dispatch(action)\n        },\n        changeMaxValue(newMaxValue) {\n            const action = changeMaxValueAC(newMaxValue);\n            dispatch(action)\n        },\n        changeValue(newValue) {\n            const action = changeValueAC(newValue);\n            dispatch(action)\n        },\n    }\n};\nconst ConnectedCounter = connect(mapStateToProps, mapDispatchToProps)(Counter);\nexport default ConnectedCounter;","import React from 'react';\nimport './App.css';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\nimport Counter from \"./Counter\";\nimport {HashRouter} from \"react-router-dom\";\n\n\nclass App extends React.Component {\n\n    render = () => {\n        return (\n            <div className=\"App\">\n                <Counter/>\n            </div>\n        );\n    }\n}\n\nconst CounterApp = (props) => {\n    return <HashRouter>\n        <Provider store={store}>\n            < App/>\n        </Provider>\n    </HashRouter>\n};\n\nexport default CounterApp;\n\n","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport CounterApp from \"./App\";\n\n\n\nReactDOM.render(<CounterApp/>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}